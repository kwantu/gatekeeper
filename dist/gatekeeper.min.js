(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.GK = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function GK(){}require("./lib/config"),require("./lib/library"),require("./lib/betterdata.dao");var getResponse=function(e,o,t,n,s,d,r){var a={status:e,name:o,message:t,error:n,model:s};return a};GK.prototype.instantiate=function(e,o,t,n,s){var d=new $.Deferred;if(o==INSTANCE_TYPE_NEW_INS)dao.get(e).done(function(e){var o=getResponse(CONFLICT_CODE,CONFLICT_NAME,"Document with same id already exists",!0,null),t=[o];d.reject(t)}).fail(function(o){library.saveEntries(t,n,e,s).done(function(o){t==PROFILE_SET_ID?service.createProfileDocuments(LOCAL_SETTINGS.COMMUNITY_communityId,e):service.addToLocalRegistry({uuid:e,setId:t,applicationId:app.SCOPE.applicationId,profileId:app.SCOPE.profileId}),d.resolve(o)}).fail(function(e){var o=getResponse(e.status,e.name,e.message,!0,e),t=[o];d.reject(t)})});else if(o==INSTANCE_TYPE_NEW_SEQ)dao.get(e).done(function(o){if(o.model.pending.status==ENTRY_STATUS_AUTHORISED||o.model.pending.status==ENTRY_STATUS_REJECTED){var t=function(e){console.log("newSeq=="+e),o.model.pending.seq=e,o.model.pending.data={},o.model.pending.status=ENTRY_STATUS_INITIALISED,o.model.pending.validDate=s,o.model.pending.revision="";var t={name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username};o.model.pending.user=t},n=e+":approved";dao.get(n).done(function(e){var n=JSON.xpath("max(//approved/seq)",ko.toJS(e),{})[0],s=n+1;t(s);var r=getResponse(CREATED_CODE,CREATED_NAME,"Sequence created",!1,o),a=[r];d.resolve(a)}).fail(function(e){var o=getResponse(e.status,e.name,"Approved doc not found to create a new sequence",!0,null),t=[o];d.reject(t)})}else{var r=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Cannot create sequence. Current status should be "+ENTRY_STATUS_AUTHORISED+" or "+ENTRY_STATUS_REJECTED,!0,null),a=[r];d.reject(a)}}).fail(function(o){library.saveEntries(t,n,e,s).done(function(e){d.resolve(e)}).fail(function(e){var o=getResponse(e.status,e.name,e.message,!0,null),t=[o];d.reject(t)})});else{var r=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Instance parameter not passed",!0,null),a=[r];d.reject(a)}return d},GK.prototype.instantiateData=function(documentId,instantiateFrom,indicatorModel,seqNo){var self=this,def=new $.Deferred,getResponse=function(e,o,t,n,s){var d={status:e,name:o,message:t,error:n,model:s};return d};return dao.get(documentId).done(function(data){if(data.model.pending.status==ENTRY_STATUS_INITIALISED)if(data.model.pending.seq==seqNo)instantiateFrom==FROM_REQUEST?dao.get(documentId).done(function(data){data.model.pending.data[indicatorModel.defaultModel.setId()]=JSON.parse(ko.toJSON(eval("indicatorModel.customModel."+indicatorModel.defaultModel.setId()),function(e,o){return"__ko_mapping__"===e?void 0:void 0==o?"":o})),data.model.pending.status=ENTRY_STATUS_DATA_INITIALISED;var response=getResponse(UPDATED_CODE,UPDATED_NAME,"Document initialised.",!1,data),responseArray=[response];def.resolve(responseArray)}).fail(function(e){var o=getResponse(e.status,e.name,"Cannot find document "+documentId,!0,null),t=[o];def.reject(t)}):instantiateFrom==FROM_DEFINITION?dao.get(documentId).done(function(data){var setId=indicatorModel.defaultModel.setId(),version=JSON.xpath("/indicators[setId eq '"+setId+"']/version",app.SCOPE.APP_CONFIG,{}),setModelId=setId+"_"+version+"_ENTRY";dao.get(setModelId).done(function(setModel){var definitionModel=eval("setModel.model.pending.data."+setId);data.model.pending.data[setId]=definitionModel,data.model.pending.status=ENTRY_STATUS_DATA_INITIALISED;var response=getResponse(UPDATED_CODE,UPDATED_NAME,"Document initialised.",!1,data),responseArray=[response];def.resolve(responseArray)}).fail(function(e){var o=getResponse(e.status,e.name,"Cannot find default model "+setModelId,!0,null),t=[o];def.reject(t)})}).fail(function(e){var o=getResponse(e.status,e.name,"Cannot find document "+documentId,!0,null),t=[o];def.reject(t)}):instantiateFrom==FROM_AUTHORISED&&dao.get(documentId).done(function(data){var setId=indicatorModel.defaultModel.setId(),version=JSON.xpath("/indicators[setId eq '"+setId+"']/version",app.SCOPE.APP_CONFIG,{}),approvedModelId=documentId+":approved";dao.get(approvedModelId).done(function(approvedModel){var max_seq=JSON.xpath("max(/model/approved/seq)",approvedModel,{})[0],lastApprovedModel=JSON.xpath("/model/approved[./seq = "+max_seq+"]",approvedModel,{})[0],newModel=eval("lastApprovedModel.data."+setId);data.model.pending.data[setId]=newModel,data.model.pending.status=ENTRY_STATUS_DATA_INITIALISED;var response=getResponse(UPDATED_CODE,UPDATED_NAME,"Document initialised.",!1,data),responseArray=[response];def.resolve(responseArray)}).fail(function(e){var o=getResponse(e.status,e.name,"Cannot find approved model "+approvedModelId,!0,null),t=[o];def.reject(t)})}).fail(function(e){var o=getResponse(e.status,e.name,"Cannot find document "+documentId,!0,null),t=[o];def.reject(t)});else{var response=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Input sequence should be equal to pending sequence.",!0,null),responseArray=[response];def.reject(responseArray)}else{var response=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Status is not in "+ENTRY_STATUS_INITIALISED+" state.",!0,null),responseArray=[response];def.reject(responseArray)}}).fail(function(e){var o=getResponse(e.status,e.name,e.message,!0,null),t=[o];def.reject(t)}),def},GK.prototype.update=function(documentId,indicatorModel){var self=this,def=new $.Deferred,processAllRules=function(index,object,indicatorModel,configDoc,ruleResponse,def_processRules){var ruleObj=configDoc.rules[index],executeAt=ruleObj.executeAt,id=ruleObj.id,seq=ruleObj.seq,type=ruleObj.executeRule.ruleType;if("local"==executeAt)switch(type){case"update":for(var source=ruleObj.executeRule.params.source,str="",ol=0;ol<ruleObj.executeRule.params.target.length;ol++){var targetItem=ruleObj.executeRule.params.target[ol],targetType=targetItem.type,targetName=targetItem.name;str="variable"==targetType?str+eval("indicatorModel.customModel."+indicatorModel.defaultModel.setId()+"."+targetName+"()")+" ":str+targetName+" "}"doc:"==source.substring(0,4)?eval("object."+source.substring(source.length,4)+"= str;"):eval("object.model.pending.data."+indicatorModel.defaultModel.setId()+"."+source+"= str;"),ruleResponse.ruleStatus="RULE_COMPLETE",index==configDoc.rules.length-1?def_processRules.resolve(ruleResponse):processAllRules(index+1,object,indicatorModel,configDoc,ruleResponse,def_processRules);break;case"initialise":break;case"unique":}else object.model.pending.processingStatus.seq=seq,object.model.pending.processingStatus.ruleStatus=PROCESSING_STATUS_SERVER_RULES,ruleResponse.ruleStatus="RULE_SERVER",def_processRules.resolve(ruleResponse);return def_processRules};return dao.get(documentId).done(function(doc){if(indicatorModel.modelErrors().length>0){var response=getResponse(PRECONDITION_FAILED_CODE,PRECONDITION_FAILED_NAME,"There are "+indicatorModel.modelErrors().length+" errors on form. Please resolve first.",!0,null),responseArray=[response];def.reject(responseArray)}else if(doc.model.pending.status==ENTRY_STATUS_DATA_INITIALISED||doc.model.pending.status==ENTRY_STATUS_UPDATED){var model=JSON.parse(ko.toJSON(eval("indicatorModel.customModel."+indicatorModel.defaultModel.setId()),function(e,o){return"__ko_mapping__"===e?void 0:void 0==o?"":o})),version="";version=indicatorModel.customModel.setId()==PROFILE_SET_ID?"V1.0":JSON.xpath("/indicators[setId eq '"+indicatorModel.customModel.setId()+"']/version",app.SCOPE.APP_CONFIG,{}),dao.get(indicatorModel.customModel.setId()+"_"+version+"_config").done(function(e){if(doc.model.pending.data[indicatorModel.customModel.setId()]=model,void 0!=e.moderation&&1==e.moderation.required&&(doc.control.draft=!0),doc.updated=moment().format(),doc.contributors.push({name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username}),doc.model.pending.user={name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username},doc.source="remote",void 0!=e.rules&&e.rules.length>0){doc.model.pending.status=ENTRY_STATUS_PENDING_RULES;var o=new $.Deferred;processAllRules(0,doc,indicatorModel,e,{ruleStatus:""},o).done(function(e){if("RULE_COMPLETE"==e.ruleStatus){if(doc.model.pending.processingStatus.seq="",doc.model.pending.processingStatus.ruleStatus="",doc.model.pending.status=ENTRY_STATUS_UPDATED,void 0!=app.processId){var o=JSON.xpath("/processes[subProcessId eq '"+app.processId+"']",doc,{});o.length>0&&(o[0].status=ENTRY_STATUS_READY_TO_SUBMIT)}indicatorModel.defaultModel.atomId(documentId);var t=getResponse(UPDATED_CODE,UPDATED_NAME,"Document updated",!1,doc),n=[t];def.resolve(n)}else if("RULE_SERVER"==e.ruleStatus){console.log("dependent onserver rule");var t=getResponse(UPDATED_CODE,UPDATED_NAME,"dependent onserver rule",!1,doc),n=[t];def.resolve(n)}else"RULE_ERROR"==e.ruleStatus&&console.log("rule error from somewhere")}).fail(function(e){def.reject("processAllRules fail promise case failed")})}else{doc.model.pending.status=ENTRY_STATUS_UPDATED,indicatorModel.defaultModel.atomId(documentId);var t=getResponse(UPDATED_CODE,UPDATED_NAME,"Document updated",!1,doc),n=[t];def.resolve(n)}}).fail(function(e){var o=getResponse(e.status,e.name,"config file not found.",!0,null),t=[o];def.reject(t)})}else{var response=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Status is not in "+ENTRY_STATUS_DATA_INITIALISED+" or "+ENTRY_STATUS_UPDATED+" state.",!0,null),responseArray=[response];def.reject(responseArray)}}).fail(function(e){var o=getResponse(e.status,e.name,e.message,!0,null),t=[o];def.reject(t)}),def},GK.prototype.authorise=function(documentId){var self=this,def=new $.Deferred;if(null!=documentId&&void 0!=documentId&&""!=documentId)dao.get(documentId).done(function(data){if(data.model.pending.status==ENTRY_STATUS_UPDATED){var setId=data.category.term,path=data.model.pending,item=eval(path);data.model.pending.status=ENTRY_STATUS_AUTHORISED;var approve_doc_id=documentId+":approved";dao.get(approve_doc_id).done(function(e){e.model.approved.push(item);var o=getResponse(UPDATED_CODE,UPDATED_NAME,"Document Model approved",!1,data),t=getResponse(UPDATED_CODE,UPDATED_NAME,"Approved model incremented",!1,e),n=[o,t];def.resolve(n)}).fail(function(e){console.log(e)})}else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Status not in updated state",!0,null),responseArray=[response];def.reject(responseArray)}}).fail(function(e){var o=getResponse(e.status,e.name,e.message,!0,null),t=[o];def.reject(t)});else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Document ID is blank",!0,null),responseArray=[response];def.reject(responseArray)}return def},GK.prototype.reject=function(documentId){var self=this,def=new $.Deferred;if(null!=documentId&&void 0!=documentId&&""!=documentId)dao.get(documentId).done(function(data){if(data.model.pending.status==ENTRY_STATUS_UPDATED){var setId=data.category.term,item=eval("data.model.pending.data"+setId);data.model.pending.status=ENTRY_STATUS_REJECTED;var rejected_doc_id=documentId+":rejected";dao.get(rejected_doc_id).done(function(e){e.model.rejected.push(item);var o=getResponse(UPDATED_CODE,UPDATED_NAME,"Document Model approved",!1,data),t=getResponse(UPDATED_CODE,UPDATED_NAME,"Rejetced model incremented",!1,e),n=[o,t];def.resolve(n)}).fail(function(e){console.log(e)})}else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Status not in updated state",!0,null),responseArray=[response];def.reject(responseArray)}}).fail(function(e){var o=getResponse(e.status,e.name,e.message,!0,null),t=[o];def.reject(t)});else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Document ID is blank",!0,null),responseArray=[response];def.reject(responseArray)}return def};var processInitialiseRule=function(e,o,t){},processUniqueRule=function(e,o,t){};GK.prototype.unlock=function(e){return new Promise(function(e,o){})},GK.prototype.persist=function(e){for(var o=new $.Deferred,t=0;t<e.length;t++)dao.save(e[t].model).done(function(e){console.log(e),o.resolve(e)}).fail(function(e){console.log(e),o.reject(e)})},module.exports=GK;

},{"./lib/betterdata.dao":2,"./lib/config":3,"./lib/library":4}],2:[function(require,module,exports){
var globalurl="",masterDB,localDB,taxonomyDB,authenticatedToSyncGateway=!1,dao=function(){return{authenticateToSyncGateway:function(e,t){var n=new $.Deferred,o="http://"+COUCHBASE_SERVER+"/"+TAXONOMY_BUCKET+"/_session",r="POST",a=JSON.stringify({name:e,password:t}),c=!0,i=new XMLHttpRequest;i.withCredentials=!0,i.onload=function(){i.status,i.responseText},i.open(r,o,c),i.setRequestHeader("Content-Type","application/json;charset=UTF-8"),i.send(a);var o="http://"+COUCHBASE_SERVER+"/"+COUCHBASE_BUCKET+"/_session",r="POST",a=JSON.stringify({name:e,password:t}),c=!0,i=new XMLHttpRequest;return i.withCredentials=!0,i.onload=function(){var e=i.status,t=i.responseText;200==e?(authenticatedToSyncGateway=!0,n.resolve(t)):n.reject(t)},i.open(r,o,c),i.setRequestHeader("Content-Type","application/json;charset=UTF-8"),i.send(a),n.promise()},get:function(e){var t=new $.Deferred;try{head.mobile&&isCordovaApp?cordova.exec(function(e){t.resolve(e)},function(e){t.reject(e)},"CBLite","getDocument",[{dbname:DBNAME+DB_IDENTIFIER,docId:e}]):localDB.get(e).then(function(e){t.resolve(e)}).catch(function(n){return console.log("Desktop - error in getting document with id: "+e+". Error stacktrace: "+n),t.reject(n),n})}catch(e){t.reject(e)}return t.promise()},getTaxonomy:function(e){var t=new $.Deferred;return head.mobile&&isCordovaApp?cordova.exec(function(e){t.resolve(e)},function(e){t.reject(e)},"CBLite","getDocument",[{dbname:TAXONOMY_DBNAME+DB_IDENTIFIER,docId:e}]):taxonomyDB.get(e).then(function(e){t.resolve(e)}).catch(function(n){return console.log("Desktop - error in getting taxonomy with id: "+e+". Error stacktrace: "+n),t.reject(n),n}),t.promise()},save:function(e){var t=new $.Deferred;if(head.mobile&&isCordovaApp)if(0!=e._id.indexOf("_design"))cordova.exec(function(e){t.resolve(e)},function(e){t.reject(e)},"CBLite","saveDocument",[{dbname:DBNAME+DB_IDENTIFIER,docId:e._id,doc:e}]);else{var n={url:globalurl+DBNAME+DB_IDENTIFIER+"/"+e._id,type:"PUT",data:JSON.stringify(e),dataType:"json",contentType:"application/json"};$.ajax(n).done(function(e,n,o){t.resolve(e)}).fail(function(n,o,r){console.log("Mobile - error in saving document with id: "+e._id+". URL: "+globalurl+DBNAME+DB_IDENTIFIER+" Error stacktrace: "+JSON.stringify(n)),t.reject(n.responseText)})}else localDB.put(e).then(function(e){t.resolve(e)}).catch(function(n){console.log("Desktop - error in saving document with id: "+e._id+". Error stacktrace: "+n),t.reject(n)});return t.promise()},saveAttachment:function(e,t,n,o,r){var a=new $.Deferred;return head.mobile&&isCordovaApp?blobUtil.base64StringToBlob(n,o).then(function(n){var o=new XMLHttpRequest;o.open("PUT",globalurl+DBNAME+DB_IDENTIFIER+"/"+e+"/"+r+"?rev="+t,!0),o.onload=function(e){a.resolve(JSON.parse(o.responseText))},o.send(n)}).catch(function(e){console.log(e),a.reject(xhr.responseText)}):localDB.putAttachment(e,r,t,n,o).then(function(e){a.resolve(e)}).catch(function(t){console.log("Desktop -error in saving attachment to the document with id: "+e+". Error stacktrace: "+t),a.reject(t)}),a.promise()},getAttachment:function(e,t,n){var o=new $.Deferred;if(head.mobile&&isCordovaApp){var r=new XMLHttpRequest;r.open("GET",globalurl+DBNAME+DB_IDENTIFIER+"/"+e+"/"+n,!0),r.responseType="blob",r.onload=function(t){if(200==this.status){var n=r.response;blobUtil.blobToBase64String(n).then(function(e){o.resolve(e)}).catch(function(t){console.log("Mobile - error in getting attachment to the document with id: "+e+". Error stacktrace: "+t),o.reject(r)})}else console.log("Mobile - error in getting attachment to the document with id: "+e),o.reject(r)},r.send()}else localDB.getAttachment(e,n).then(function(e){blobUtil.blobToBase64String(e).then(function(e){o.resolve(e)}).catch(function(e){o.reject(e)})}).catch(function(t){console.log("Desktop -error in getting attachment to the document with id: "+e+". Error stacktrace: "+t),o.reject(t)});return o.promise()},deleteAttachment:function(e,t,n){var o=new $.Deferred;if(head.mobile&&isCordovaApp){var r={url:globalurl+DBNAME+DB_IDENTIFIER+"/"+e+"/"+n+"?rev="+t,type:"DELETE",dataType:"json"};$.ajax(r).done(function(e,t,n){o.resolve(e)}).fail(function(t,n,r){console.log("Mobile - error in deleting attachment to the document with id: "+e+". Error stacktrace: "+JSON.stringify(t)),o.reject(t.responseText)})}else localDB.removeAttachment(e,n,t).then(function(e){o.resolve(e)}).catch(function(t){console.log("Desktop - error in deleting attachment to the document with id: "+e+". Error stacktrace: "+JSON.stringify(xhr)),o.reject(t)});return o.promise()},upsert:function(e){var t=new $.Deferred,n=function(n){e._rev=n._rev,dao.save(e).done(function(e){t.resolve(e)}).fail(function(e){t.reject(e)})},o=function(n){dao.save(e).done(function(e){console.log(e),t.resolve(e)}).fail(function(e){t.reject(e)})};return dao.get(e._id).done(n).fail(o),t.promise()},startPull:function(){var e=new $.Deferred,t=LOCAL_SETTINGS.SUBSCRIPTIONS.syncUsername,n=LOCAL_SETTINGS.SUBSCRIPTIONS.syncPassword;return head.mobile&&isCordovaApp?cordova.exec(function(t){SYNC_SEQ=t,e.resolve(t)},function(t){e.reject(t)},"CBLite","pull",[{dbname:DBNAME+DB_IDENTIFIER,url:"http://"+t+":"+n+"@"+COUCHBASE_SERVER+"/"+COUCHBASE_BUCKET}]):0==authenticatedToSyncGateway?dao.authenticateToSyncGateway(t,n).done(function(t){localDB.replicate.from(new PouchDB("http://"+COUCHBASE_SERVER+"/"+COUCHBASE_BUCKET,{ajax:{timeout:6e4}}),{live:!1,retry:!0,timeout:6e4}).then(function(t){e.resolve("")}).catch(function(t){e.reject(t)})}).fail(function(t){e.reject(t)}):localDB.replicate.from(new PouchDB("http://"+COUCHBASE_SERVER+"/"+COUCHBASE_BUCKET,{ajax:{timeout:6e4}}),{live:!1,retry:!0,timeout:6e4}).then(function(t){e.resolve("")}).catch(function(t){e.reject(t)}),e.promise()},pullTaxonomies:function(){var e=new $.Deferred,t=LOCAL_SETTINGS.SUBSCRIPTIONS.syncUsername,n=LOCAL_SETTINGS.SUBSCRIPTIONS.syncPassword;return head.mobile&&isCordovaApp?cordova.exec(function(t){e.resolve(t)},function(t){e.reject(t)},"CBLite","pull",[{dbname:TAXONOMY_DBNAME+DB_IDENTIFIER,url:"http://"+t+":"+n+"@"+COUCHBASE_SERVER+"/"+TAXONOMY_BUCKET}]):0==authenticatedToSyncGateway?dao.authenticateToSyncGateway(t,n).done(function(t){taxonomyDB.replicate.from(new PouchDB("http://"+COUCHBASE_SERVER+"/"+TAXONOMY_BUCKET,{ajax:{timeout:6e4}}),{live:!1,retry:!0,timeout:6e4}).then(function(t){e.resolve("")}).catch(function(t){e.reject(t)})}).fail(function(t){e.reject(t)}):taxonomyDB.replicate.from(new PouchDB("http://"+COUCHBASE_SERVER+"/"+TAXONOMY_BUCKET,{ajax:{timeout:6e4}}),{live:!1,retry:!0,timeout:6e4}).then(function(t){e.resolve("")}).catch(function(t){e.reject(t)}),e.promise()},startSync:function(){var e=new $.Deferred;return dao.get("_local/LOCAL_SETTINGS").then(function(t){var n=LOCAL_SETTINGS.SUBSCRIPTIONS.syncUsername,o=LOCAL_SETTINGS.SUBSCRIPTIONS.syncPassword;head.mobile&&isCordovaApp?cordova.exec(function(t){SYNC_SEQ=t,e.resolve(t)},function(t){e.reject(t)},"CBLite","sync",[{dbname:DBNAME+DB_IDENTIFIER,url:"http://"+n+":"+o+"@"+COUCHBASE_SERVER+"/"+COUCHBASE_BUCKET}]):0==authenticatedToSyncGateway?dao.authenticateToSyncGateway(n,o).done(function(t){localDB.sync(new PouchDB("http://"+COUCHBASE_SERVER+"/"+COUCHBASE_BUCKET,{ajax:{timeout:6e4}}),{live:!0,retry:!0,timeout:6e4}).on("change",function(n){SYNC_SEQ=""+n.change.last_seq,e.resolve(t)}).on("active",function(){}).on("complete",function(e){}).on("error",function(t){e.reject(t)})}).fail(function(t){e.reject(t)}):localDB.sync(new PouchDB("http://"+COUCHBASE_SERVER+"/"+COUCHBASE_BUCKET,{ajax:{timeout:6e4}}),{live:!0,retry:!0,timeout:6e4}).on("change",function(n){SYNC_SEQ=""+n.change.last_seq,e.resolve(t)}).on("active",function(){}).on("complete",function(e){}).on("error",function(t){e.reject(t)})}).fail(function(t){e.reject(t)}),e.promise()},startSyncTaxonomies:function(){return dao.pullTaxonomies()},changes:function(){var e=new $.Deferred;return head.mobile&&isCordovaApp?$.ajax({url:globalurl+DBNAME+DB_IDENTIFIER+"/_changes?since="+LOCAL_SETTINGS.SYNC_SEQ,type:"GET",dataType:"json",success:function(t,n,o){e.resolve(t)},error:function(t,n,o){console.log("Error = "+JSON.stringify(t)),e.reject(t.responseText)}}):localDB.changes({since:parseInt(LOCAL_SETTINGS.SYNC_SEQ)}).then(function(t){e.resolve(t)}).catch(function(t){e.reject(t)}),e.promise()},createDatabase:function(){var e=new $.Deferred;return head.mobile&&isCordovaApp?window.cblite?window.cblite.getURL(function(t,n){if(t)alert("error launching Couchbase Lite: "+t);else{globalurl=n;try{var o=new XMLHttpRequest;o.open("GET",globalurl,!1),o.send(null)}catch(e){}$.ajax({url:globalurl+DBNAME+"master",type:"PUT",data:"",dataType:"json",contentType:"application/json",success:function(t,n,o){201==o.status||412==o.status?dao.getIdentifier().done(function(t){DB_IDENTIFIER=t,dao.createDatabaseImpl(e)}).fail(function(t){DB_IDENTIFIER=generateUUID().substring(0,8),dao.saveIdentifier().done(function(t){dao.createDatabaseImpl(e)})}):e.reject(o.responseText)},error:function(t,n,o){201==t.status||412==t.status?dao.getIdentifier().done(function(t){DB_IDENTIFIER=t,dao.createDatabaseImpl(e)}).fail(function(t){DB_IDENTIFIER=generateUUID().substring(0,8),dao.saveIdentifier().done(function(t){dao.createDatabaseImpl(e)})}):e.reject(t.responseText)}})}}):alert("error, Couchbase Lite plugin not found."):new PouchDB(DBNAME+"master").then(function(t){masterDB=t,dao.getIdentifier().done(function(t){DB_IDENTIFIER=t,dao.createDatabaseImpl(e)}).fail(function(t){DB_IDENTIFIER=generateUUID().substring(0,8),dao.saveIdentifier().done(function(t){dao.createDatabaseImpl(e)})})}),e.promise()},createDatabaseImpl:function(e){head.mobile&&isCordovaApp?($.ajax({url:globalurl+TAXONOMY_DBNAME+DB_IDENTIFIER,type:"PUT",data:"",dataType:"json",contentType:"application/json",success:function(e,t,n){},error:function(e,t,n){}}),$.ajax({url:globalurl+DBNAME+DB_IDENTIFIER,type:"PUT",data:"",dataType:"json",contentType:"application/json",success:function(t,n,o){201==o.status||412==o.status?e.resolve(t):e.reject(o.responseText)},error:function(t,n,o){201==t.status||412==t.status?e.resolve(t.responseText):e.reject(t.responseText)}})):new PouchDB(TAXONOMY_DBNAME+DB_IDENTIFIER).then(function(t){taxonomyDB=t,new PouchDB(DBNAME+DB_IDENTIFIER).then(function(t){localDB=t,e.resolve("Database created")})})},deleteDocument:function(e){var t=new $.Deferred;if(head.mobile&&isCordovaApp){var n=function(e){$.ajax({url:globalurl+DBNAME+DB_IDENTIFIER+"/"+e._id+"?rev="+e._rev,type:"DELETE",data:JSON.stringify(e),dataType:"json",contentType:"application/json",success:function(e,n,o){t.resolve(e)},error:function(e,n,o){t.reject(e.responseText)}})};dao.get(e).done(n).fail(function(e){t.reject(e)})}else localDB.get(e).then(function(e){return localDB.remove(e)}).then(function(e){t.resolve(e)}).catch(function(e){t.reject(e)});return t.promise()},resetDatabase:function(){var e=new $.Deferred,t=DB_IDENTIFIER;return DB_IDENTIFIER=generateUUID().substring(0,8),dao.saveIdentifier().done(function(n){head.mobile&&isCordovaApp?$.ajax({url:globalurl+TAXONOMY_DBNAME+t,type:"DELETE",success:function(n,o,r){$.ajax({url:globalurl+DBNAME+t,type:"DELETE",success:function(t,n,o){dao.createDatabase().done(new function(n){e.resolve(t)}).fail(function(t){e.resolve(t)})},error:function(t,n,o){e.resolve(t.responseText)}})},error:function(t,n,o){e.resolve(t.responseText)}}):taxonomyDB.destroy().then(function(t){localDB.destroy().then(function(t){dao.createDatabase().done(new function(t){e.resolve(t)}).fail(function(t){e.reject(t)})}).catch(function(t){e.reject(t)})}).catch(function(t){e.reject(t)})}),e.promise()},createDocView:function(e,t){var n=new $.Deferred;return t._id="_design/"+e,dao.upsert(t).done(function(e){n.resolve(e)}).fail(function(e){n.reject(e)}),n.promise()},getIdentifier:function(){var e=new $.Deferred;try{if(head.mobile&&isCordovaApp){var t={url:globalurl+DBNAME+"master/_local/SETTINGS",type:"GET",dataType:"json"};$.ajax(t).done(function(t,n,o){e.resolve(t.DB_IDENTIFIER)}).fail(function(t,n,o){e.reject(t)})}else masterDB.get("_local/SETTINGS").then(function(t){e.resolve(t.DB_IDENTIFIER)}).catch(function(t){return e.reject(t),t})}catch(t){e.reject(t)}return e.promise()},saveIdentifier:function(){var e={DB_IDENTIFIER:DB_IDENTIFIER,_id:"_local/SETTINGS"},t=new $.Deferred,n=function(e){if(head.mobile&&isCordovaApp){var n={url:globalurl+DBNAME+"master/_local/SETTINGS",type:"PUT",data:JSON.stringify(e),dataType:"json",contentType:"application/json"};$.ajax(n).done(function(e,n,o){t.resolve(e)}).fail(function(e,n,o){t.reject(e.responseText)})}else masterDB.put(e).then(function(e){t.resolve(e)}).catch(function(e){t.reject(e)})},o=function(t){e._rev=t._rev,n(e)},r=function(t){n(e)};if(head.mobile&&isCordovaApp){var a={url:globalurl+DBNAME+"master/_local/SETTINGS",type:"GET",dataType:"json"};$.ajax(a).done(o).fail(r)}else masterDB.get("_local/SETTINGS").then(o).catch(r);return t.promise()},getDocView:function(e,t,n){var o=new $.Deferred;try{var r=!1;if(void 0!=n&&void 0!=n.descending&&(r=n.descending),head.mobile&&isCordovaApp){var a="?include_docs=true&key="+n.key+"&limit="+n.pageSizeVal+"&size="+n.pageIndexVal*n.pageSizeVal+"&descending="+r;$.ajax({url:globalurl+DBNAME+DB_IDENTIFIER+"/_design/"+e+"/_view/"+t+a,type:"GET",dataType:"json",success:function(e,t,n){o.resolve(e)},error:function(e,t,n){console.log("error occured while getting doc view "+JSON.stringify(e)),o.reject(e.responseText)}})}else localDB.query(e+"/"+t,{include_docs:!0,key:n.key,limit:n.pageSizeVal,skip:n.pageIndexVal*n.pageSizeVal,descending:r}).then(function(e){o.resolve(e)}).catch(function(e){console.log(e),o.reject(e)})}catch(e){o.reject(e)}return o.promise()},search:function(e,t){var n=new $.Deferred,o="view_searchData",r=generateUUID(),a={language:"javascript",views:{view_searchData:{map:"function(doc) {var searchableCategories = JSON.parse('"+JSON.stringify(e)+"');if(typeof (doc.title) != 'undefined' && typeof (doc.category) != 'undefined' && typeof (doc.category.term) != 'undefined'){if(searchableCategories.indexOf(doc.category.term) > -1){var docTitle = doc.title.toLowerCase();if( (doc.category.term == 'participant' && doc._id.toLowerCase().indexOf('"+t.toLowerCase()+"') > -1) || docTitle.indexOf('"+t.toLowerCase()+"') > -1) {  var jsonObj = {}; jsonObj.isProfile = doc.category.term == '"+PROFILE_SET_ID+"'; emit(doc.title.toUpperCase(),  jsonObj ); }}}}"}}},c=function(e){setTimeout(function(){var e={pageSizeVal:50,pageIndexVal:0,include_docs:!0};dao.getDocView(r,o,e).done(function(e){n.resolve(e)}).fail(function(e){n.reject(e)})},1e3)};return dao.createDocView(r,a).done(c).fail(function(e){n.reject(e)}),n.promise()},profileData:function(e,t){var n=new $.Deferred,o="view_searchData",r="Search"+e+t,a={pageSizeVal:500,pageIndexVal:0,include_docs:!0};return dao.getDocView(r,o,a).done(function(e){n.resolve(e)}).fail(function(a){var c={language:"javascript",views:{view_searchData:{map:"function(doc) {if(typeof (doc.title) != 'undefined' && typeof (doc.category) != 'undefined' && typeof (doc.category.term) != 'undefined'){if( doc.category.term == '"+e+"' && doc.channels.indexOf('"+t+'\') > -1) {  var jsonObj = {"doc": {  "updated": doc.updated, "_id": doc._id, "title": doc.title, "category": { "term": doc.category.term } }}; emit(doc.title.toUpperCase(),  jsonObj ); }}}'}}},i=function(e){setTimeout(function(){var e={pageSizeVal:500,pageIndexVal:0,include_docs:!0};dao.getDocView(r,o,e).done(function(e){n.resolve(e)}).fail(function(e){n.reject(e)})},2e3)};dao.createDocView(r,c).done(i).fail(function(e){n.reject(e)})}),n}}}();

},{}],3:[function(require,module,exports){
var COUCHBASE_SERVER="kwantu10.kwantu.net:8000",COUCHBASE_BUCKET="kwantu_apps",TAXONOMY_BUCKET="kwantu_taxonomies",SYNC_SEQ="0",DBNAME="kwantu_apps",TAXONOMY_DBNAME="kwantu_taxonomies",DB_IDENTIFIER="",DOMAIN="http://kwantu9data.kwantu.net:8080",USER_AUTH=DOMAIN+"/exist/rest/db/kwantu-resource/api/authenticate1.8.xq",BIOMETRIC_SERVICE=DOMAIN+"/exist/rest/db/kwantu-resource/api/biometric/biometric.xql",ONLINE_VALIDATION_URL=DOMAIN+"/exist/rest/db/kwantu-resource/mobileServices/validateRule.xql",PROFILE_SET_ID="appProfile",INSTANCE_TYPE_NEW_INS="newInstance",INSTANCE_TYPE_NEW_SEQ="newSequence",CONFLICT_CODE=409,CONFLICT_NAME="Document Conflict",CREATED_CODE=210,CREATED_NAME="Document Created",UPDATED_CODE=200,UPDATED_NAME="Document Updated",SERVER_ERROR_CODE=500,SERVER_ERROR_NAME="Server Error",BAD_REQUEST_CODE=400,BAD_REQUEST_NAME="Bad Request",PRECONDITION_FAILED_CODE=412,PRECONDITION_FAILED_NAME="PreConditions Failed.",FROM_REQUEST="fromRequest",FROM_DEFINITION="fromDefinition",FROM_AUTHORISED="fromAuthorised",LOCAL_SETTINGS={_id:"_local/LOCAL_SETTINGS",SYNC_SEQ:"0",SESSION:{},SUBSCRIPTIONS:{},LANG:"en"},COMMUNITY_CONFIG={},PROCESS_STATUS_NOT_STARTED="NotStarted",PROCESS_STATUS_NOT_CREATED="Created",PROCESS_STATUS_IN_PROGRESS="InProgress",PROCESS_STATUS_IN_AWAITING="awaitingAuthorisation",PROCESS_STATUS_COMPLETE="Complete",PROCESS_INITIATE_USER="user",ENTRY_STATUS_NOT_STARTED="NotStarted",ENTRY_STATUS_IN_PROGRESS="InProgress",ENTRY_STATUS_READY_TO_SUBMIT="Ready To Submit",ENTRY_STATUS_COMPLETE="Complete",ENTRY_STATUS_SUBMITTED="Submitted",ENTRY_STATUS_INITIALISED="Instantiated",ENTRY_STATUS_DATA_INITIALISED="DataInitialised",ENTRY_STATUS_PENDING="Pending",ENTRY_STATUS_PENDING_RULES="PendingRules",ENTRY_STATUS_UPDATED="Updated",ENTRY_STATUS_AUTHORISED="Authorised",ENTRY_STATUS_REJECTED="Rejected",PROCESSING_STATUS_SERVER_RULES="ProcessingServerRules",appConfig={content:{data:{community:{design_docs:[{docId:"category",view:{language:"javascript",views:{notificationCount:{map:"function(doc) { if(typeof (doc.type) != 'undefined'){if(doc.type=='notification' && doc.read == false){ emit(doc.createdDateTime,  {} ); }}}"},notification:{map:"function(doc) { if(typeof (doc.type) != 'undefined'){if(doc.type=='notification'){ emit((!doc.read).toString() + doc.createdDateTime,  doc ); }}}"}}}}]}}}};

},{}],4:[function(require,module,exports){
"use strict";var library=function(){return{entryWrapper:function(setId,profileId,documentId,validDate){var dfd=new $.Deferred,version=JSON.xpath("/indicators[setId eq '"+setId+"']/version",app.SCOPE.APP_CONFIG,{}),entryId=setId+"_"+version+"_ENTRY";return dao.get(setId+"_"+version+"_config").done(function(setConfig){dao.get(entryId).done(function(wrapper){wrapper._id=documentId,delete wrapper._rev,eval("delete wrapper.model.pending.data."+setId),wrapper.type="indicator",void 0!=setConfig.moderation&&1==setConfig.moderation.required&&(wrapper.control.draft=!0),wrapper.channels=[],void 0!=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityChannel&&1==LOCAL_SETTINGS.COMMUNITY_CONFIG.communityChannel&&wrapper.channels.push("community_"+LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId),void 0!=LOCAL_SETTINGS.COMMUNITY_CONFIG.profileChannel&&1==LOCAL_SETTINGS.COMMUNITY_CONFIG.profileChannel&&setId!=PROFILE_SET_ID&&wrapper.channels.push("profile_"+profileId),wrapper["meta-data"].profileId=profileId,wrapper["meta-data"].setId=setId,wrapper["meta-data"].applicationId=app.SCOPE.applicationId,wrapper["meta-data"].communityId=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId,wrapper.updated=moment().format(),wrapper.model.pending.user={name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username},wrapper.author={name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username},wrapper.contributors.push({name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username}),wrapper.category.term=setId,wrapper.source="remote",wrapper.created=moment().format(),wrapper.model.pending.status=ENTRY_STATUS_INITIALISED,wrapper.model.pending.seq=1,wrapper.model.pending.validDate=validDate,service.getGPS().done(function(e){wrapper.gps=e,dfd.resolve(wrapper)}).fail(function(e){wrapper.gps={},dfd.resolve(wrapper)})}).fail(function(e){dfd.reject(e)})}).fail(function(e){dfd.reject(e)}),dfd.promise()},approvedWrapper:function(e,r,t){var a=new $.Deferred,n=JSON.xpath("/indicators[setId eq '"+e+"']/version",app.SCOPE.APP_CONFIG,{}),o=e+"_"+n+"_APPROVED";return dao.get(e+"_"+n+"_config").done(function(n){dao.get(o).done(function(o){o._id=t,delete o._rev,o.type="indicator",void 0!=n.moderation&&1==n.moderation.required&&(o.control.draft=!0),o.title=t+"_APPROVED",o.channels=[],void 0!=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityChannel&&1==LOCAL_SETTINGS.COMMUNITY_CONFIG.communityChannel&&o.channels.push("community_"+LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId),void 0!=LOCAL_SETTINGS.COMMUNITY_CONFIG.profileChannel&&1==LOCAL_SETTINGS.COMMUNITY_CONFIG.profileChannel&&e!=PROFILE_SET_ID&&o.channels.push("profile_"+r),o["meta-data"].profileId=r,o["meta-data"].setId=e,o["meta-data"].applicationId=app.SCOPE.applicationId,o["meta-data"].communityId=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId,o.updated=moment().format(),o.author={name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username},o.contributors.push({name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username}),o.category.term=e,o.source="remote",o.created=moment().format(),service.getGPS().done(function(e){o.gps=e,a.resolve(o)}).fail(function(e){o.gps={},a.reject(e)})}).fail(function(e){a.reject(e)})}).fail(function(e){a.reject(e)}),a.promise()},rejectedWrapper:function(e,r,t){var a=new $.Deferred,n=JSON.xpath("/indicators[setId eq '"+e+"']/version",app.SCOPE.APP_CONFIG,{}),o=e+"_"+n+"_REJECTED";return dao.get(e+"_"+n+"_config").done(function(n){dao.get(o).done(function(o){o._id=t,delete o._rev,o.type="indicator",void 0!=n.moderation&&1==n.moderation.required&&(o.control.draft=!0),o.title=t+"_REJECTED",o.channels=[],void 0!=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityChannel&&1==LOCAL_SETTINGS.COMMUNITY_CONFIG.communityChannel&&o.channels.push("community_"+LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId),void 0!=LOCAL_SETTINGS.COMMUNITY_CONFIG.profileChannel&&1==LOCAL_SETTINGS.COMMUNITY_CONFIG.profileChannel&&e!=PROFILE_SET_ID&&o.channels.push("profile_"+r),o["meta-data"].profileId=r,o["meta-data"].setId=e,o["meta-data"].applicationId=app.SCOPE.applicationId,o["meta-data"].communityId=LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId,o.updated=moment().format(),o.author={name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username},o.contributors.push({name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username}),o.category.term=e,o.source="remote",o.created=moment().format(),service.getGPS().done(function(e){o.gps=e,a.resolve(o)}).fail(function(e){o.gps={},a.reject(e)})}).fail(function(e){a.reject(e)})}).fail(function(e){a.reject(e)}),a.promise()},saveEntries:function(e,r,t,a){var n=new $.Deferred;library.entryWrapper(e,r,t,a).done(function(a){var o=function(){var a=new $.Deferred,n=t+":approved";return library.approvedWrapper(e,r,n).done(function(e){a.resolve(e)}).fail(function(e){a.reject(e)}),a},d=function(){var a=new $.Deferred,n=t+":rejected";library.rejectedWrapper(e,r,n).done(function(e){a.resolve(e)}).fail(function(e){a.reject(e)});return a},S=function(e,r,t,a,n){var o={status:e,name:r,message:t,error:a,model:n};return o};o().done(function(e){d().done(function(r){var t=S(CREATED_CODE,CREATED_NAME,"Model created",!1,a),o=S(CREATED_CODE,CREATED_NAME,"Approved created",!1,e),d=S(CREATED_CODE,CREATED_NAME,"Rejected created",!1,r),I=[t,o,d];n.resolve(I)}).fail(function(r){var t=S(CREATED_CODE,CREATED_NAME,"Model created",!1,a),o=S(CREATED_CODE,CREATED_NAME,"Approved created",!1,e),d=S(err.status,err.name,"Rejected object not created with error message "+err.message,!0,null),I=[t,o,d];n.reject(I)})}).fail(function(e){var r=S(CREATED_CODE,CREATED_NAME,"Model created",!1,a),t=S(err.status,err.name,"Approved object not created "+err.message,!0,null),o=S(err.status,err.name,"Rejected object creation skipped due to approve creation failure"+err.message,!0,null),d=[r,t,o];n.reject(d)})}).fail(function(e){var r=getResponse(e.status,e.name,"Model object not created "+e.message,!0,null),t=getResponse(e.status,e.name,"Approved object not created skipped due to model creation failure "+e.message,!0,null),a=getResponse(e.status,e.name,"Rejected object creation skipped due to model creation failure"+e.message,!0,null),o=[r,t,a];n.reject(o)});return n},createProfileInstance:function(){}}}();

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
