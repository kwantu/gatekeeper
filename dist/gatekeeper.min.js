(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.GK = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function GK(){}var getResponse=function(e,t,o,n,a,s,d){var l={status:e,name:t,message:o,error:n,model:a,approvedModel:s,rejectedModel:d};return l};GK.prototype.instantiate=function(e,t,o,n,a){var s=new $.Deferred;return t==INSTANCE_TYPE_NEW_INS?dao.get(e).done(function(e){var t=getResponse(CONFLICT_CODE,CONFLICT_NAME,"Document with same id already exists",!0,null,null,null);s.reject(t)}).fail(function(t){library.saveEntries(o,n,e,a).done(function(t){o==PROFILE_SET_ID?service.createProfileDocuments(LOCAL_SETTINGS.COMMUNITY_CONFIG.communityId,e):service.addToLocalRegistry({uuid:e,setId:o,applicationId:app.SCOPE.applicationId,profileId:app.SCOPE.profileId}),s.resolve(t)}).fail(function(e){s.reject(e)})}):t==INSTANCE_TYPE_NEW_SEQ?dao.get(e).done(function(t){if(t.model.pending.status==ENTRY_STATUS_AUTHORISED||t.model.pending.status==ENTRY_STATUS_REJECTED){var o=function(e){t.model.pending.seq=e,t.model.pending.data={},t.model.pending.status=ENTRY_STATUS_INITIALISED,t.model.pending.validDate=a,t.model.pending.revision="";var o={name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username};t.model.pending.user=o,dao.save(t).done(function(e){s.resolve(t)}).fail(function(e){s.reject(e)})},n=e+":approved";dao.get(n).done(function(e){var t=JSON.xpath("max(//approved/seq)",ko.toJS(e),{})[0],n=t+1;o(n)}).fail(function(e){s.reject(e)})}else{var d=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Cannot create sequence.Current status should be"+ENTRY_STATUS_AUTHORISED+"or "+ENTRY_STATUS_REJECTED,!0,null,null,null);s.resolve(d)}}).fail(function(t){library.saveEntries(o,n,e,a).done(function(e){s.resolve(e)}).fail(function(e){var t=getResponse(e.status,e.name,e.message,!0,null,null,null);s.resolve(t)})}):console.log("instance type not found"),s},GK.prototype.instantiateData=function(documentId,instantiateFrom,indicatorModel,seqNo){var self=this,def=new $.Deferred,getResponse=function(e,t,o,n,a,s,d){var l={status:e,name:t,message:o,error:n,model:a,approvedModel:s,rejectedModel:d};return l},savePacket=function(e){dao.save(e).done(function(e){def.resolve(e)}).fail(function(e){def.reject(e)})};return dao.get(documentId).done(function(data){if(data.model.pending.status==ENTRY_STATUS_INITIALISED)if(data.model.pending.seq==seqNo)instantiateFrom==FROM_REQUEST?dao.get(documentId).done(function(data){data.model.pending.data[indicatorModel.defaultModel.setId()]=JSON.parse(ko.toJSON(eval("indicatorModel.customModel."+indicatorModel.defaultModel.setId()),function(e,t){return"__ko_mapping__"===e?void 0:void 0==t?"":t})),data.model.pending.status=ENTRY_STATUS_DATA_INITIALISED,savePacket(data);var response=getResponse(UPDATED_CODE,UPDATED_NAME,"Document initialised",!1,data,null,null);def.resolve(response)}).fail(function(e){def.reject(e)}):instantiateFrom==FROM_DEFINITION?dao.get(documentId).done(function(data){var setId=indicatorModel.defaultModel.setId(),version=JSON.xpath("/indicators[setId eq '"+setId+"']/version",app.SCOPE.APP_CONFIG,{}),setModelId=setId+"_"+version+"_ENTRY";dao.get(setModelId).done(function(setModel){var definitionModel=eval("setModel.model.pending.data."+setId);data.model.pending.data[setId]=definitionModel,data.model.pending.status=ENTRY_STATUS_DATA_INITIALISED,savePacket(data);var response=getResponse(UPDATED_CODE,UPDATED_NAME,"Document initialised",!1,data,null,null);def.resolve(response)}).fail()}).fail(function(e){def.reject(e)}):instantiateFrom==FROM_AUTHORISED&&dao.get(documentId).done(function(data){var setId=indicatorModel.defaultModel.setId(),version=JSON.xpath("/indicators[setId eq '"+setId+"']/version",app.SCOPE.APP_CONFIG,{}),approvedModelId=documentId+":approved";dao.get(approvedModelId).done(function(approvedModel){var max_seq=JSON.xpath("max(/model/approved/seq)",approvedModel,{})[0],lastApprovedModel=JSON.xpath("/model/approved[./seq = "+max_seq+"]",approvedModel,{})[0],newModel=eval("lastApprovedModel.data."+setId);data.model.pending.data[setId]=newModel,data.model.pending.status=ENTRY_STATUS_DATA_INITIALISED,savePacket(data);var response=getResponse(UPDATED_CODE,UPDATED_NAME,"Document initialised",!1,data,null,null);def.resolve(response)}).fail()}).fail(function(e){def.reject(e)});else{var response=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Input sequence should be equal to pending sequence.",!0,null,null,null);def.resolve(response)}else{var response=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Status is not in "+ENTRY_STATUS_INITIALISED+" state.",!0,null,null,null);def.resolve(response)}}).fail(function(e){var t=getResponse(e.status,e.name,e.message,!0,null,null,null);def.resolve(t)}),def},GK.prototype.update=function(documentId,indicatorModel){var self=this,def=new $.Deferred,processAllRules=function(index,documentId,indicatorModel,configDoc,ruleResponse,def_processRules){var ruleObj=configDoc.rules[index],executeAt=ruleObj.executeAt,id=ruleObj.id,seq=ruleObj.seq,type=ruleObj.executeRule.ruleType;if("local"==executeAt)switch(type){case"update":for(var source=ruleObj.executeRule.params.source,str="",ol=0;ol<ruleObj.executeRule.params.target.length;ol++){var targetItem=ruleObj.executeRule.params.target[ol],targetType=targetItem.type,targetName=targetItem.name;str="variable"==targetType?str+eval("indicatorModel.customModel."+indicatorModel.defaultModel.setId()+"."+targetName+"()")+" ":str+targetName+" "}dao.get(documentId).done(function(object){"doc:"==source.substring(0,4)?eval("object."+source.substring(source.length,4)+"= str;"):eval("object.model.pending.data."+indicatorModel.defaultModel.setId()+"."+source+"= str;"),dao.save(object).done(function(e){ruleResponse.ruleStatus="RULE_COMPLETE",index==configDoc.rules.length-1?def_processRules.resolve(ruleResponse):processAllRules(index+1,documentId,indicatorModel,configDoc,ruleResponse,def_processRules)}).fail(function(e){ruleResponse.ruleStatus="RULE_ERROR"})}).fail(function(e){});break;case"initialise":break;case"unique":}else dao.get(documentId).done(function(e){e.model.pending.processingStatus.seq=seq,e.model.pending.processingStatus.ruleStatus=PROCESSING_STATUS_SERVER_RULES,dao.save(e).done(function(e){ruleResponse.ruleStatus="RULE_SERVER",def_processRules.resolve(ruleResponse)}).fail(function(e){console.log("error function in PROCESSING_STATUS_SERVER_RULES"+e)})}).fail(function(){});return def_processRules};return dao.get(documentId).done(function(doc){if(indicatorModel.modelErrors().length>0){var response=getResponse(PRECONDITION_FAILED_CODE,PRECONDITION_FAILED_NAME,"There are "+indicatorModel.modelErrors().length+" errors on form. Please resolve first.",!0,null,null,null);def.reject(response)}else if(doc.model.pending.status==ENTRY_STATUS_DATA_INITIALISED||doc.model.pending.status==ENTRY_STATUS_UPDATED){var model=JSON.parse(ko.toJSON(eval("indicatorModel.customModel."+indicatorModel.defaultModel.setId()),function(e,t){return"__ko_mapping__"===e?void 0:void 0==t?"":t})),version="";version=indicatorModel.customModel.setId()==PROFILE_SET_ID?"V1.0":JSON.xpath("/indicators[setId eq '"+indicatorModel.customModel.setId()+"']/version",app.SCOPE.APP_CONFIG,{});for(var files=JSON.xpath("//*[fileData and isChanged eq 'true']",model,{}),attachementsToProcess=[],ol=0;ol<files.length;ol++){var filesObj=files[ol];"image/jpeg"==filesObj.mime||"image/png"==filesObj.mime?attachementsToProcess.push({data:filesObj.fileData.substring(filesObj.fileData.indexOf("base64")+7),id:filesObj.uuid,mime:filesObj.mime}):attachementsToProcess.push({data:filesObj.fileData,id:filesObj.uuid,mime:filesObj.mime}),filesObj.fileData="",filesObj.isChanged="false"}for(var allFiles=JSON.xpath("//*[fileData ne '' and uuid ne '']",model,{}),ol=0;ol<allFiles.length;ol++)allFiles[ol].fileData="";var saveAttachments=function(e,t){dao.saveAttachment(e.id,e.rev,attachementsToProcess[t].data,attachementsToProcess[t].mime,attachementsToProcess[t].id).done(function(e){attachementsToProcess.length>t+1&&saveAttachments(e,t+1)}).fail(function(e){console.log("can not saved attachemnt "+e)})},postSave=function(e){indicatorModel.defaultModel.atomId(documentId),attachementsToProcess.length>0&&saveAttachments(e,0);var t=getResponse(UPDATED_CODE,UPDATED_NAME,"Document updated",!1,e,null,null);def.resolve(t)},savePacket=function(e){dao.save(e).done(postSave).fail(function(e){app.showMessage("Unable to save changes due to version conflict. Please reload the form to see the recent updates."),deffered.reject(e)})};dao.get(indicatorModel.customModel.setId()+"_"+version+"_config").done(function(e){doc.model.pending.data[indicatorModel.customModel.setId()]=model,void 0!=e.moderation&&1==e.moderation.required&&(doc.control.draft=!0),doc.updated=moment().format(),doc.contributors.push({name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username}),doc.model.pending.user={name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username},doc.source="remote",e.rules.length>0?(doc.model.pending.status=ENTRY_STATUS_PENDING_RULES,dao.save(doc).done(function(t){var o=new $.Deferred;processAllRules(0,documentId,indicatorModel,e,{ruleStatus:""},o).done(function(e){"RULE_COMPLETE"==e.ruleStatus?dao.get(documentId).done(function(e){if(e.model.pending.processingStatus.seq="",e.model.pending.processingStatus.ruleStatus="",e.model.pending.status=ENTRY_STATUS_UPDATED,void 0!=app.processId){var t=JSON.xpath("/processes[subProcessId eq '"+app.processId+"']",e,{});t.length>0&&(t[0].status=ENTRY_STATUS_READY_TO_SUBMIT)}savePacket(e)}).fail(function(e){def.reject("ENTRY_STATUS_UPDATED failed")}):"RULE_SERVER"==e.ruleStatus?console.log("dependent onserver rule"):"RULE_ERROR"==e.ruleStatus&&console.log("rule error from somewhere")}).fail(function(e){def.reject("processAllRules fail promise case failed")})}).fail(function(e){def.reject("ENTRY_STATUS_PENDING_RULES failed")})):dao.get(documentId).done(function(e){e.model.pending.status=ENTRY_STATUS_UPDATED,savePacket(e)}).fail(function(e){def.reject("ENTRY_STATUS_UPDATED failed")})}).fail(function(e){var t=getResponse(e.status,e.name,e.message,!0,null,null,null);def.reject(t)})}else{var response=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Status is not in "+ENTRY_STATUS_DATA_INITIALISED+" or "+ENTRY_STATUS_UPDATED+" state.",!0,null,null,null);def.resolve(response)}}).fail(function(e){var t=getResponse(e.status,e.name,e.message,!0,null,null,null);def.reject(t)}),def},GK.prototype.authorise=function(documentId){var self=this,def=new $.Deferred;if(null!=documentId&&void 0!=documentId&&""!=documentId)dao.get(documentId).done(function(data){if(data.model.pending.status==ENTRY_STATUS_UPDATED){var saveDoc=function(e){dao.save(e).done(function(e){}).fail(function(e){def.reject(e)})},setId=data.category.term,path=data.model.pending,item=eval(path);data.model.pending.status=ENTRY_STATUS_AUTHORISED,saveDoc(data);var approve_doc_id=documentId+":approved";dao.get(approve_doc_id).done(function(e){e.model.approved.push(item),saveDoc(e),def.resolve(e)}).fail(function(e){console.log(e)})}else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Status not in updated state",!0,null,null,null);def.reject(response)}}).fail(function(e){var t=getResponse(e.status,e.name,e.message,!0,null,null,null);def.resolve(t)});else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Document ID is blank",!0,null,null,null);def.reject(response)}return def},GK.prototype.reject=function(documentId){var self=this,def=new $.Deferred;if(null!=documentId&&void 0!=documentId&&""!=documentId)dao.get(documentId).done(function(data){if(data.model.pending.status==ENTRY_STATUS_UPDATED){var saveDoc=function(e){dao.save(e).done(function(e){}).fail(function(e){def.reject(e)})},setId=data.category.term,item=eval("data.model.pending.data"+setId);data.model.pending.status=ENTRY_STATUS_REJECTED,saveDoc(data);var rejected_doc_id=documentId+":rejected";dao.get(rejected_doc_id).done(function(e){e.model.rejected.push(item),saveDoc(e),def.resolve(e)}).fail(function(e){console.log(e)})}else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Status not in updated state",!0,null,null,null);def.reject(response)}}).fail(function(e){var t=getResponse(e.status,e.name,e.message,!0,null,null,null);def.resolve(t)});else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Document ID is blank",!0,null,null,null);def.reject(response)}return def};var processInitialiseRule=function(e,t,o){},processUniqueRule=function(e,t,o){};GK.prototype.unlock=function(e){return new Promise(function(e,t){})},module.exports=GK;

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
