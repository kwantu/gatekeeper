(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.GK = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function GK(){}var getResponse=function(e,t,o,n,s){var r={status:e,name:t,message:o,error:n,model:s};return r};GK.prototype.instantiate=function(e,t,o,n,s){return new Promise(function(r,a){try{if(t==INSTANCE_TYPE_NEW_INS)dao.get(e).done(function(e){var t=getResponse(CONFLICT_CODE,CONFLICT_NAME,"Document with same id already exists.",!0,null),o=[t];a(o)}).fail(function(t){library.saveEntries(o,n,e,s).then(function(e){r(e)},function(e){a(e)})});else if(t==INSTANCE_TYPE_NEW_SEQ)dao.get(e).done(function(t){if(t.model.pending.status==ENTRY_STATUS_AUTHORISED||t.model.pending.status==ENTRY_STATUS_REJECTED){var o=function(e){console.log("newSeq=="+e),t.model.pending.seq=e,t.model.pending.data={},t.model.pending.status=ENTRY_STATUS_INITIALISED,t.model.pending.validDate=s,t.model.pending.revision="";var o={name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username};t.model.pending.user=o},n=e+":approved";dao.get(n).done(function(e){var n=JSON.xpath("max(//approved/seq)",ko.toJS(e),{})[0],s=n+1;o(s);var a=getResponse(CREATED_CODE,CREATED_NAME,"Sequence created",!1,t),d=[a];r(d)}).fail(function(e){var t=getResponse(e.status,e.name,"Approved doc not found to create a new sequence",!0,null),o=[t];a(o)})}else{var d=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Cannot create sequence. Current status should be "+ENTRY_STATUS_AUTHORISED+" or "+ENTRY_STATUS_REJECTED,!0,null),l=[d];a(l)}},function(t){library.saveEntries(o,n,e,s).then(function(e){r(e)},function(e){var t=getResponse(e.status,e.name,e.message,!0,null),o=[t];a(o)})});else{var d=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Instance parameter not passed",!0,null),l=[d];a(l)}}catch(e){console.log("catch case "+e),a(e)}})},GK.prototype.instantiateData=function(documentId,instantiateFrom,indicatorModel,seqNo){var _this=this;return new Promise(function(resolve,reject){try{var getResponse=function(e,t,o,n,s){var r={status:e,name:t,message:o,error:n,model:s};return r};dao.get(documentId).done(function(data){if(data.model.pending.status==ENTRY_STATUS_INITIALISED)if(data.model.pending.seq==seqNo)instantiateFrom==FROM_REQUEST?dao.get(documentId).done(function(data){data.model.pending.data[indicatorModel.defaultModel.setId()]=JSON.parse(ko.toJSON(eval("indicatorModel.customModel."+indicatorModel.defaultModel.setId()),function(e,t){return"__ko_mapping__"===e?void 0:void 0==t?"":t})),data.model.pending.status=ENTRY_STATUS_DATA_INITIALISED;var response=getResponse(UPDATED_CODE,UPDATED_NAME,"Document initialised.",!1,data),responseArray=[response];resolve(responseArray)}).fail(function(e){var t=getResponse(e.status,e.name,"Cannot find document "+documentId,!0,null),o=[t];reject(o)}):instantiateFrom==FROM_DEFINITION?dao.get(documentId).done(function(data){var setId=indicatorModel.defaultModel.setId(),version=JSON.xpath("/indicators[setId eq '"+setId+"']/version",app.SCOPE.APP_CONFIG,{}),setModelId=setId+"_"+version+"_ENTRY";dao.get(setModelId).done(function(setModel){var definitionModel=eval("setModel.model.pending.data."+setId);data.model.pending.data[setId]=definitionModel,data.model.pending.status=ENTRY_STATUS_DATA_INITIALISED;var response=getResponse(UPDATED_CODE,UPDATED_NAME,"Document initialised.",!1,data),responseArray=[response];resolve(responseArray)}).fail(function(e){var t=getResponse(e.status,e.name,"Cannot find default model "+setModelId,!0,null),o=[t];reject(o)})}).fail(function(e){var t=getResponse(e.status,e.name,"Cannot find document "+documentId,!0,null),o=[t];reject(o)}):instantiateFrom==FROM_AUTHORISED&&dao.get(documentId).done(function(data){var setId=indicatorModel.defaultModel.setId(),version=JSON.xpath("/indicators[setId eq '"+setId+"']/version",app.SCOPE.APP_CONFIG,{}),approvedModelId=documentId+":approved";dao.get(approvedModelId).done(function(approvedModel){var max_seq=JSON.xpath("max(/model/approved/seq)",approvedModel,{})[0],lastApprovedModel=JSON.xpath("/model/approved[./seq = "+max_seq+"]",approvedModel,{})[0],newModel=eval("lastApprovedModel.data."+setId);data.model.pending.data[setId]=newModel,data.model.pending.status=ENTRY_STATUS_DATA_INITIALISED;var response=getResponse(UPDATED_CODE,UPDATED_NAME,"Document initialised.",!1,data),responseArray=[response];resolve(responseArray)}).fail(function(e){var t=getResponse(e.status,e.name,"Cannot find approved model "+approvedModelId,!0,null),o=[t];reject(o)})}).fail(function(e){var t=getResponse(e.status,e.name,"Cannot find document "+documentId,!0,null),o=[t];reject(o)});else{var response=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Input sequence should be equal to pending sequence.",!0,null),responseArray=[response];reject(responseArray)}else{var response=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Status is not in "+ENTRY_STATUS_INITIALISED+" state.",!0,null),responseArray=[response];reject(responseArray)}}).fail(function(e){var t=getResponse(e.status,e.name,e.message,!0,null),o=[t];reject(o)})}catch(e){reject(e)}})},GK.prototype.update=function(documentId,indicatorModel){var self=this;return new Promise(function(resolve,reject){try{var processAllRules=function(index,object,indicatorModel,configDoc,ruleResponse,def_processRules){var ruleObj=configDoc.rules[index],executeAt=ruleObj.executeAt,id=ruleObj.id,seq=ruleObj.seq,type=ruleObj.executeRule.ruleType;if("local"==executeAt)switch(type){case"update":for(var source=ruleObj.executeRule.params.source,str="",ol=0;ol<ruleObj.executeRule.params.target.length;ol++){var targetItem=ruleObj.executeRule.params.target[ol],targetType=targetItem.type,targetName=targetItem.name;str="variable"==targetType?str+eval("indicatorModel.customModel."+indicatorModel.defaultModel.setId()+"."+targetName+"()")+" ":str+targetName+" "}"doc:"==source.substring(0,4)?eval("object."+source.substring(source.length,4)+"= str;"):eval("object.model.pending.data."+indicatorModel.defaultModel.setId()+"."+source+"= str;"),ruleResponse.ruleStatus="RULE_COMPLETE",index==configDoc.rules.length-1?def_processRules.resolve(ruleResponse):processAllRules(index+1,object,indicatorModel,configDoc,ruleResponse,def_processRules);break;case"initialise":break;case"unique":}else object.model.pending.processingStatus.seq=seq,object.model.pending.processingStatus.ruleStatus=PROCESSING_STATUS_SERVER_RULES,ruleResponse.ruleStatus="RULE_SERVER",def_processRules.resolve(ruleResponse);return def_processRules};dao.get(documentId).done(function(doc){if(indicatorModel.modelErrors().length>0){var response=getResponse(PRECONDITION_FAILED_CODE,PRECONDITION_FAILED_NAME,"There are "+indicatorModel.modelErrors().length+" errors on form. Please resolve first.",!0,null),responseArray=[response];reject(responseArray)}else if(doc.model.pending.status==ENTRY_STATUS_DATA_INITIALISED||doc.model.pending.status==ENTRY_STATUS_UPDATED){var model=JSON.parse(ko.toJSON(eval("indicatorModel.customModel."+indicatorModel.defaultModel.setId()),function(e,t){return"__ko_mapping__"===e?void 0:void 0==t?"":t})),version="";version=indicatorModel.customModel.setId()==PROFILE_SET_ID?"V1.0":JSON.xpath("/indicators[setId eq '"+indicatorModel.customModel.setId()+"']/version",app.SCOPE.APP_CONFIG,{}),dao.get(indicatorModel.customModel.setId()+"_"+version+"_config").done(function(e){if(doc.model.pending.data[indicatorModel.customModel.setId()]=model,void 0!=e.moderation&&1==e.moderation.required&&(doc.control.draft=!0),doc.updated=moment().format(),doc.contributors.push({name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username}),doc.model.pending.user={name:LOCAL_SETTINGS.SESSION.firstName+" "+LOCAL_SETTINGS.SESSION.lastName,userId:LOCAL_SETTINGS.SUBSCRIPTIONS.userId,username:LOCAL_SETTINGS.SUBSCRIPTIONS.username},doc.source="remote",void 0!=e.rules&&e.rules.length>0){doc.model.pending.status=ENTRY_STATUS_PENDING_RULES;var t=new $.Deferred;processAllRules(0,doc,indicatorModel,e,{ruleStatus:""},t).done(function(e){if("RULE_COMPLETE"==e.ruleStatus){if(doc.model.pending.processingStatus.seq="",doc.model.pending.processingStatus.ruleStatus="",doc.model.pending.status=ENTRY_STATUS_UPDATED,void 0!=app.processId){var t=JSON.xpath("/processes[subProcessId eq '"+app.processId+"']",doc,{});t.length>0&&(t[0].status=ENTRY_STATUS_READY_TO_SUBMIT)}indicatorModel.defaultModel.atomId(documentId);var o=getResponse(UPDATED_CODE,UPDATED_NAME,"Document updated",!1,doc),n=[o];resolve(n)}else if("RULE_SERVER"==e.ruleStatus){console.log("dependent onserver rule");var o=getResponse(UPDATED_CODE,UPDATED_NAME,"dependent onserver rule",!1,doc),n=[o];resolve(n)}else"RULE_ERROR"==e.ruleStatus&&console.log("rule error from somewhere")}).fail(function(e){reject("processAllRules fail promise case failed")})}else{doc.model.pending.status=ENTRY_STATUS_UPDATED,indicatorModel.defaultModel.atomId(documentId);var o=getResponse(UPDATED_CODE,UPDATED_NAME,"Document updated",!1,doc),n=[o];resolve(n)}}).fail(function(e){var t=getResponse(e.status,e.name,"config file not found.",!0,null),o=[t];reject(o)})}else{var response=getResponse(SERVER_ERROR_CODE,SERVER_ERROR_NAME,"Status is not in "+ENTRY_STATUS_DATA_INITIALISED+" or "+ENTRY_STATUS_UPDATED+" state.",!0,null),responseArray=[response];reject(responseArray)}}).fail(function(e){var t=getResponse(e.status,e.name,e.message,!0,null),o=[t];reject(o)})}catch(e){reject(e)}})},GK.prototype.authorise=function(documentId){var _this=this;return new Promise(function(resolve,reject){try{if(null!=documentId&&void 0!=documentId&&""!=documentId)dao.get(documentId).done(function(data){if(data.model.pending.status==ENTRY_STATUS_UPDATED){var setId=data.category.term,path=data.model.pending,item=eval(path);data.model.pending.status=ENTRY_STATUS_AUTHORISED;var approve_doc_id=documentId+":approved";dao.get(approve_doc_id).done(function(e){e.model.approved.push(item);var t=getResponse(UPDATED_CODE,UPDATED_NAME,"Document Model approved",!1,data),o=getResponse(UPDATED_CODE,UPDATED_NAME,"Approved model incremented",!1,e),n=[t,o];resolve(n)}).fail(function(e){console.log(e)})}else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Status not in updated state",!0,null),responseArray=[response];reject(responseArray)}}).fail(function(e){var t=getResponse(e.status,e.name,e.message,!0,null),o=[t];reject(o)});else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Document ID is blank",!0,null),responseArray=[response];reject(responseArray)}}catch(e){reject(e)}})},GK.prototype.reject=function(documentId){var _this=this;return new Promise(function(resolve,reject){try{if(null!=documentId&&void 0!=documentId&&""!=documentId)dao.get(documentId).done(function(data){if(data.model.pending.status==ENTRY_STATUS_UPDATED){var setId=data.category.term,item=eval("data.model.pending.data"+setId);data.model.pending.status=ENTRY_STATUS_REJECTED;var rejected_doc_id=documentId+":rejected";dao.get(rejected_doc_id).done(function(e){e.model.rejected.push(item);var t=getResponse(UPDATED_CODE,UPDATED_NAME,"Document Model approved",!1,data),o=getResponse(UPDATED_CODE,UPDATED_NAME,"Rejetced model incremented",!1,e),n=[t,o];resolve(n)}).fail(function(e){console.log(e)})}else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Status not in updated state",!0,null),responseArray=[response];reject(responseArray)}}).fail(function(e){var t=getResponse(e.status,e.name,e.message,!0,null),o=[t];reject(o)});else{var response=getResponse(BAD_REQUEST_CODE,BAD_REQUEST_NAME,"Document ID is blank",!0,null),responseArray=[response];reject(responseArray)}}catch(e){reject(e)}})};var processInitialiseRule=function(e,t,o){},processUniqueRule=function(e,t,o){};GK.prototype.unlock=function(e){return new Promise(function(e,t){})},GK.prototype.persist=function(e){return new Promise(function(t,o){try{for(var n=0;n<e.length;n++)dao.save(e[n].model).done(function(e){console.log(e),t(e)}).fail(function(e){console.log(e),o(e)})}catch(e){o(e)}})},module.exports=GK;

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
